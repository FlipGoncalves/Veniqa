# Create Deployment for Rsyslog
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rsyslog
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rsyslog
  template:
    metadata:
      labels:
        app: rsyslog
    spec:
      containers:
      - name: rsyslog
        image: registry.deti/gic-asenhoradosaneis/rsyslog
        ports:
          - containerPort: 514
            protocol: UDP
          - containerPort: 514
            protocol: TCP
          - containerPort: 2514
            protocol: TCP
        volumeMounts:
          - name: config-volume
            mountPath: /etc/rsyslog.conf
            subPath: rsyslog.conf
      volumes:
        - name: config-volume
          configMap:
            name: rsyslog-config

# Create Service for Rsyslog
---
apiVersion: v1
kind: Service
metadata:
  name: rsyslog
  namespace: gic-asenhoradosaneis
spec:
  selector:
    app: rsyslog
  ports:
  - name: udp
    protocol: UDP
    port: 514
    targetPort: 514
  - name: tcp
    protocol: TCP
    port: 514
    targetPort: 514
  - name: relp
    protocol: TCP
    port: 20514
    targetPort: 20514

# Create ConfigMap for Rsyslog
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-config
  namespace: gic-asenhoradosaneis
data:
  rsyslog.conf: |
    module(load="imudp")
    input(type="imudp" port="514")
    module(load="imtcp")
    input(type="imtcp" port="514")
    module(load="imuxsock") # provides support for local system logging (e.g. via logger command)
    module(load="imklog") # provides kernel logging support
    module(load="imrelp")

    input(type="imrelp" port="20514")

    $ActionSendTCPRebindInterval (>= 4.5.1)
    $ActionSendUDPRebindInterval (>= 4.3.2)

    # where to send the log
    *.* @rsyslog.gic-asenhoradosaneis:514 # Forward logs to the rsyslog service

    if $hostname contains 'redis' then {
      action(type="omfile" file="/var/log/gic-asenhoradosaneis-redis.log")
      *.* /var/log/gic-asenhoradosaneis-syslog.log
      stop
    }

    if $hostname contains 'mongo' then {
      action(type="omfile" file="/var/log/gic-asenhoradosaneis-mongodb.log")
      *.* /var/log/gic-asenhoradosaneis-syslog.log
      stop
    }

    local2.* /var/log/gic-asenhoradosaneis-webclients.log
    local3.* /var/log/gic-asenhoradosaneis-shopping-server.log
    local4.* /var/log/gic-asenhoradosaneis-management-server.log

    *.* /var/log/gic-asenhoradosaneis-syslog.log
    stop

# Create Job for Rsyslog IP Change
---
apiVersion: batch/v1
kind: Job
metadata:
  name: rsyslog-ipchange
  namespace: gic-asenhoradosaneis
spec:
  template:
    spec:
      containers:
      - name: rsyslog-ipchange
        image: bitnami/kubectl:latest
        command:
        - "sh"
        - "-c"
        - >
          for pod in $(kubectl get pods -n gic-asenhoradosaneis); 
          do 
            kubectl exec $pod -n gic-asenhoradosaneis -- pkill -HUP -f syslog
          done;
      restartPolicy: OnFailure