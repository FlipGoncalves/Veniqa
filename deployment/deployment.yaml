# Create Management Server deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-server
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-server
  template:
    metadata:
      labels:
        app: management-server
    spec:
      containers:
      - name: management-server
        image: registry.deti/gic-asenhoradosaneis/management-server
        ports:
          - containerPort: 3000
        volumeMounts:
          - name: management-server-secret
            mountPath: "/tmp/management-server-secrets"
            readOnly: true
      volumes:
        - name: management-server-secret
          secret:
            secretName: management-server-secret


# Create Management WebClient deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-webclient
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-webclient
  template:
    metadata:
      labels:
        app: management-webclient
    spec:
      containers:
      - name: management-webclient
        image: registry.deti/gic-asenhoradosaneis/management-webclient
        ports:
          - containerPort: 5202

# Create Shopping Server deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopping-server
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shopping-server
  template:
    metadata:
      labels:
        app: shopping-server
    spec:
      containers:
      - name: shopping-server
        image: registry.deti/gic-asenhoradosaneis/shopping-server
        ports:
          - containerPort: 3000
        volumeMounts:
          - name: shopping-server-secret
            mountPath: "/tmp/shopping-server-secrets"
            readOnly: true
      volumes:
        - name: shopping-server-secret
          secret:
            secretName: shopping-server-secret

# Create Shopping WebClient deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopping-webclient
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shopping-webclient
  template:
    metadata:
      labels:
        app: shopping-webclient
    spec:
      containers:
      - name: shopping-webclient
        image: registry.deti/gic-asenhoradosaneis/shopping-webclient
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 300Mi
        # imagePullPolicy: Always
        ports:
          - containerPort: 8080

# Create nginx deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: registry.deti/gic-asenhoradosaneis/nginx
          name: nginx
          ports:
            - containerPort: 80
          resources: {}
          volumeMounts:
            - name: webclient-static
              mountPath: '/management-webclient:/management-webclient-app'
              mountPath: '/management-webclient-app/node_modules'
              mountPath: '/shopping-webclient:/shopping-webclient-app'
              mountPath: '/shopping-webclient-app/node_modules'
            - name: server-static
              mountPath: '/management-server:/management-server-app'
              mountPath: '/management-server-app/node_modules'
              mountPath: '/shopping-server:/shopping-server-app'
              mountPath: '/shopping-server-app/node_modules'
      restartPolicy: Always
      volumes:  
        - name: webclient-static
          persistentVolumeClaim:
            claimName: webclient-static-pvc
        - name: server-static
          persistentVolumeClaim:
            claimName: server-static-pvc
        
# Create Redis deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-server
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-server
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - name: redis-server
        image: "redis:alpine"
        args: ["--requirepass", "SOME_PASSWORD"]
        ports:
          - name: redis-server
            containerPort: 6379
        volumeMounts:
          - name: redis-static
            mountPath: /data
          - name: redis-secret
            mountPath: "/tmp/redis-secrets"
            readOnly: true
      restartPolicy: Always
      volumes:  
        - name: redis-static
          persistentVolumeClaim:
            claimName: redis-static-pvc
        - name: redis-secret
          secret:
            secretName: redis-secret

# Create MongoDB deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-server
  namespace: gic-asenhoradosaneis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-server
  template:
    metadata:
      labels:
        app: mongodb-server
    spec:
      containers:
      - name: mongodb-server
        image: registry.deti/gic-asenhoradosaneis/mongodb
        ports:
          - name: mongodb-server
            containerPort: 27017
        volumeMounts:
          - name: mongodb-static
            mountPath: dbconfig:/data/configdb
            mountPath: dbdata:/data/db
      restartPolicy: Always
      volumes:  
        - name: mongodb-static
          persistentVolumeClaim:
            claimName: mongodb-static-pvc


# Create Service for Management Server
---
apiVersion: v1
kind: Service
metadata:
  name: management-server
  namespace: gic-asenhoradosaneis
spec:
  ports:
  - port: 4202
    targetPort: 3000
  selector:
    app: management-server

# Create Service for Management WebClient
---
apiVersion: v1
kind: Service
metadata:
  name: management-webclient
  namespace: gic-asenhoradosaneis
spec:
  ports:
  - port: 4201
    targetPort: 3000
  selector:
    app: management-webclient

# Create Service for Shopping Server
---
apiVersion: v1
kind: Service
metadata:
  name: shopping-server
  namespace: gic-asenhoradosaneis
spec:
  ports:
  - port: 8090
    targetPort: 8090
  selector:
    app: shopping-server

# Create Service for Shopping WebClient
---
apiVersion: v1
kind: Service
metadata:
  name: shopping-webclient
  namespace: gic-asenhoradosaneis
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: shopping-webclient

# Create Service for Nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: gic-asenhoradosaneis
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx

# Create Service for Redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis-server
  namespace: gic-asenhoradosaneis
spec:
  selector:
    app: redis-server
  type: LoadBalancer
  ports:
    - name: redis-port
      protocol: TCP
      port: 6379
      targetPort: 6379
  loadBalancerIP: 192.168.0.204

# Create Service for Redis
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-server
  namespace: gic-asenhoradosaneis
spec:
  selector:
    app: mongodb-server
  ports:
    - port: 27000
      targetPort: 27017






# Configure Traefik
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gic-asenhoradosaneis-k3s
  namespace: gic-asenhoradosaneis
  annotations:
    spec.ingressClassName: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: gic-asenhoradosaneis.k3s
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port: 
              number: 80
